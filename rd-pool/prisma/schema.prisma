// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

//generator client {
//provider = "prisma-client-js"
// output   = "../src/generated/prisma"
//}

// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ----------------------------
// Actor (User or Organization)
// ----------------------------
model Actor {
  id        String    @id @default(uuid())
  type      ActorType
  email     String    @unique
  password  String // hashed
  name      String
  bio       String?
  createdAt DateTime  @default(now())

  // Relations
  projects      Project[]              @relation("ProjectOwner")
  requests      ParticipationRequest[]
  partnershipsA Partnership[]          @relation("PartnershipA")
  partnershipsB Partnership[]          @relation("PartnershipB")
}

// ----------------------------
// Projects
// ----------------------------
model Project {
  id          String   @id @default(uuid())
  title       String
  description String?
  createdAt   DateTime @default(now())

  // Relations
  owner    Actor                  @relation("ProjectOwner", fields: [ownerId], references: [id])
  ownerId  String
  requests ParticipationRequest[]
}

// ----------------------------
// Participation Requests
// ----------------------------
model ParticipationRequest {
  id        String        @id @default(uuid())
  status    RequestStatus @default(PENDING)
  createdAt DateTime      @default(now())

  // Relations
  actor     Actor   @relation(fields: [actorId], references: [id])
  actorId   String
  project   Project @relation(fields: [projectId], references: [id])
  projectId String
}

// ----------------------------
// Partnerships
// ----------------------------
model Partnership {
  id String @id @default(uuid())

  // Self relation (Actor â†” Actor)
  a   Actor  @relation("PartnershipA", fields: [aId], references: [id])
  aId String
  b   Actor  @relation("PartnershipB", fields: [bId], references: [id])
  bId String
}

// ----------------------------
// Enums
// ----------------------------
enum ActorType {
  INDIVIDUAL
  ORGANIZATION
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}
